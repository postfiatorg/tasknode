"""baseline existing schema

Revision ID: bd5556abda5f
Revises: 
Create Date: 2025-01-20 16:48:26.213332

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bd5556abda5f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authorized_addresses',
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('authorized_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('is_authorized', sa.Boolean(), server_default='true', nullable=True),
    sa.Column('deauthorized_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('auth_source', sa.String(length=50), nullable=True),
    sa.Column('auth_source_user_id', sa.String(length=50), nullable=True),
    sa.Column('flag_type', sa.String(length=10), nullable=True),
    sa.Column('flag_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("address ~ '^r[1-9A-HJ-NP-Za-km-z]{25,34}$'", name='valid_xrp_address'),
    sa.CheckConstraint("flag_type IN ('YELLOW', 'RED') OR flag_type IS NULL", name='valid_flag_type'),
    sa.PrimaryKeyConstraint('address')
    )
    op.create_index('idx_authorized_addresses_source', 'authorized_addresses', ['auth_source', 'auth_source_user_id'], unique=False)
    op.create_table('pft_holders',
    sa.Column('account', sa.String(length=255), nullable=False),
    sa.Column('balance', sa.Numeric(), server_default='0', nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.Column('last_tx_hash', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('account')
    )
    op.create_index('idx_pft_holders_balance', 'pft_holders', ['balance'], unique=False)
    op.create_table('postfiat_tx_cache',
    sa.Column('hash', sa.String(length=255), nullable=False),
    sa.Column('ledger_index', sa.BigInteger(), nullable=True),
    sa.Column('close_time_iso', sa.String(length=255), nullable=True),
    sa.Column('meta', sa.Text(), nullable=True),
    sa.Column('tx_json', sa.Text(), nullable=True),
    sa.Column('validated', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('hash')
    )
    op.create_index('idx_close_time_iso', 'postfiat_tx_cache', [sa.text('close_time_iso DESC')], unique=False)
    op.create_table('transaction_memos',
    sa.Column('hash', sa.String(length=255), nullable=False),
    sa.Column('account', sa.String(length=255), nullable=True),
    sa.Column('destination', sa.String(length=255), nullable=True),
    sa.Column('pft_amount', sa.Numeric(), nullable=True),
    sa.Column('xrp_fee', sa.Numeric(), nullable=True),
    sa.Column('memo_format', sa.Text(), server_default='', nullable=True),
    sa.Column('memo_type', sa.Text(), server_default='', nullable=True),
    sa.Column('memo_data', sa.Text(), server_default='', nullable=True),
    sa.Column('datetime', sa.DateTime(), nullable=True),
    sa.Column('transaction_result', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['hash'], ['postfiat_tx_cache.hash'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('hash')
    )
    op.create_index('idx_account_destination', 'transaction_memos', ['account', 'destination'], unique=False)
    op.create_index('idx_memo_fields', 'transaction_memos', ['memo_type', 'memo_format', 'memo_data'], unique=False)
    op.create_table('transaction_processing_results',
    sa.Column('hash', sa.String(length=255), nullable=False),
    sa.Column('processed', sa.Boolean(), nullable=False),
    sa.Column('rule_name', sa.String(length=255), nullable=True),
    sa.Column('response_tx_hash', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['hash'], ['postfiat_tx_cache.hash'], ),
    sa.PrimaryKeyConstraint('hash')
    )

    op.execute('ALTER TABLE authorized_addresses OWNER TO postfiat')
    op.execute('ALTER TABLE postfiat_tx_cache OWNER TO postfiat')
    op.execute('ALTER TABLE transaction_memos OWNER TO postfiat')
    op.execute('ALTER TABLE transaction_processing_results OWNER TO postfiat')
    op.execute('ALTER TABLE pft_holders OWNER TO postfiat')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction_processing_results')
    op.drop_index('idx_memo_fields', table_name='transaction_memos')
    op.drop_index('idx_account_destination', table_name='transaction_memos')
    op.drop_table('transaction_memos')
    op.drop_index('idx_close_time_iso', table_name='postfiat_tx_cache')
    op.drop_table('postfiat_tx_cache')
    op.drop_index('idx_pft_holders_balance', table_name='pft_holders')
    op.drop_table('pft_holders')
    op.drop_index('idx_authorized_addresses_source', table_name='authorized_addresses')
    op.drop_table('authorized_addresses')
    # ### end Alembic commands ###
